{"ast":null,"code":"// an array containing all of the elements in the page\nlet ALL_ELEMENTS = []; // map element ids to location in ALL_ELEMENTS\n\nlet PAGE_MAP = {}; // shortcut to access speech synthesizer\n\nlet VOICE_SYNTH = window.speechSynthesis; // array containing all voices\n\nlet VOICES = []; // global for voice\n\nlet VOICE; // map\n\nlet VOICE_MAP = {}; // global for index of first element on page (following controls)\n// NOTE: will need to update based on elements (controls) we insert into the page\n\nlet MIN_INDEX = 11; // global for current index\n\nlet CURRENT_INDEX = MIN_INDEX;\nlet SHOULD_READ = false; // global for highlight color\n// default yellow\n\nlet HIGHLIGHT_COLOR = \"#fff280\";\n\nfunction highlightElement(e) {\n  e.style['background-color'] = HIGHLIGHT_COLOR;\n  e.style['text-decoration'] = \"underline\";\n  e.style['color'] = \"black\";\n}\n\nfunction unhighlightElement(e) {\n  e.style['background-color'] = \"\";\n  e.style['text-decoration'] = \"\";\n  e.style['color'] = \"\";\n}\n\nlet CURRENT_ELEMENT = {\n  setAndSpeak: async function (newElement) {\n    this.value = newElement;\n\n    if (newElement.style.hidden !== true && newElement.style.visibility !== \"none\") {\n      this.value = newElement;\n      unhighlightElement(newElement);\n      let handler = HANDLERS[ROLES[newElement.tagName.toLowerCase()]];\n      let speakString = handler(newElement);\n\n      if (speakString !== \"\") {\n        highlightElement(newElement);\n        let utterance = new SpeechSynthesisUtterance(speakString);\n        console.log(\"utterance.voice #1\");\n        console.log(utterance.voice);\n        console.log(\"VOICE\");\n        console.log(VOICE);\n        utterance.voice = VOICE;\n        console.log(\"utterance.voice #2\");\n        console.log(utterance.voice);\n        VOICE_SYNTH.speak(utterance);\n        return new Promise(resolve => {\n          utterance.onend = resolve;\n        });\n      }\n    }\n  },\n  value: null\n};\n\nconst screenReader = () => {\n  // inject html elements before mapping out the page\n  injectHtml(); // map out the page to fill out PAGE_MAP array\n\n  mapPage();\n\n  let checkReading = async function () {\n    return SHOULD_READ;\n  }; // Set the voice preferences for the page\n\n\n  let voiceSelect = document.getElementById(\"voice\");\n\n  voiceSelect.onchange = () => {\n    VOICE = VOICE_MAP[voiceSelect.value];\n  }; // Set the highlight color for the page\n\n\n  let select = document.getElementById(\"highlight-color\");\n\n  select.onchange = () => {\n    HIGHLIGHT_COLOR = select.value;\n  };\n\n  document.getElementById(\"start-reading\").addEventListener(\"click\", () => {\n    console.log(\"start\"); // if (!SHOULD_READ) -- idea to handle multiple \"read page\" clicks (potentially return to later) -- messes up checkReading\n\n    SHOULD_READ = true; // restart reading page if at the end\n\n    if (CURRENT_INDEX === ALL_ELEMENTS.length - 1) {\n      CURRENT_INDEX = MIN_INDEX;\n    }\n\n    let READING_LOOP = async function () {\n      console.log(ALL_ELEMENTS.length);\n\n      for (CURRENT_INDEX; CURRENT_INDEX < ALL_ELEMENTS.length; CURRENT_INDEX++) {\n        if (await checkReading()) {\n          console.log(CURRENT_INDEX); // in case we had just been stopped, unhighlight the previous thing\n\n          unhighlightElement(CURRENT_ELEMENT.value);\n          let newElement = ALL_ELEMENTS[CURRENT_INDEX];\n          await CURRENT_ELEMENT.setAndSpeak(newElement);\n        } else {\n          highlightElement(CURRENT_ELEMENT.value);\n          console.log(\"Reading stopped\");\n          break;\n        }\n      }\n    };\n\n    READING_LOOP();\n  }); // event listener for clicking the stop reading button\n\n  document.getElementById(\"stop-reading\").addEventListener(\"click\", () => {\n    console.log(\"stop\");\n    VOICE_SYNTH.cancel();\n    SHOULD_READ = false;\n  }); // event listeners for arrow key presses and interacting using space\n\n  window.addEventListener(\"keydown\", async event => {\n    let newElement; // potentially leave highlighting until restarting\n\n    switch (event.key) {\n      case \"ArrowLeft\":\n        // cancel the voice and prevent default\n        event.preventDefault();\n        VOICE_SYNTH.cancel();\n        console.log(\"Going back\");\n        SHOULD_READ = false; // in case we had just been stopped\n\n        unhighlightElement(CURRENT_ELEMENT.value); // get the element before the one that's currently being read out\n\n        CURRENT_INDEX = PAGE_MAP[CURRENT_ELEMENT.value.id] - 1;\n        console.log(CURRENT_INDEX); // make sure that the user can't get to our buttons\n\n        if (CURRENT_INDEX < MIN_INDEX) {\n          CURRENT_INDEX = MIN_INDEX;\n        } // speak and then unhighlight this element\n\n\n        newElement = ALL_ELEMENTS[CURRENT_INDEX]; // skip over invisible elements\n\n        while (ROLES[newElement.tagName.toLowerCase()] === \"invisible\") {\n          CURRENT_INDEX -= 1;\n\n          if (CURRENT_INDEX < MIN_INDEX) {\n            CURRENT_INDEX = MIN_INDEX;\n            newElement = ALL_ELEMENTS[CURRENT_INDEX];\n            break;\n          }\n\n          newElement = ALL_ELEMENTS[CURRENT_INDEX];\n        }\n\n        await CURRENT_ELEMENT.setAndSpeak(newElement); // unhighlightElement(newElement)\n\n        break;\n\n      case \"ArrowRight\":\n        // cancel the voice and prevent default\n        event.preventDefault();\n        VOICE_SYNTH.cancel();\n        console.log(\"Going forward\");\n        SHOULD_READ = false; // in case we had just been stopped\n\n        unhighlightElement(CURRENT_ELEMENT.value); // get the element before the one that's currently being read out\n\n        CURRENT_INDEX = PAGE_MAP[CURRENT_ELEMENT.value.id] + 1;\n        console.log(CURRENT_INDEX); // make sure user can't go past length of ALL_ELEMENTS\n\n        if (CURRENT_INDEX >= ALL_ELEMENTS.length) {\n          CURRENT_INDEX = ALL_ELEMENTS.length - 1;\n        } // speak and then unhighlight this element\n\n\n        newElement = ALL_ELEMENTS[CURRENT_INDEX];\n\n        while (ROLES[newElement.tagName.toLowerCase()] === \"invisible\") {\n          CURRENT_INDEX += 1;\n\n          if (CURRENT_INDEX >= ALL_ELEMENTS.length) {\n            CURRENT_INDEX = ALL_ELEMENTS.length - 1;\n            newElement = ALL_ELEMENTS[CURRENT_INDEX];\n            break;\n          }\n        }\n\n        await CURRENT_ELEMENT.setAndSpeak(newElement); // unhighlightElement(newElement)\n\n        break;\n\n      case \"Enter\":\n        {\n          event.preventDefault();\n          let e = CURRENT_ELEMENT.value;\n\n          if (e.tagName.toLowerCase() === \"input\") {\n            e.focus();\n          } else {\n            // else, it will be a button or a link\n            e.click();\n          }\n\n          break;\n        }\n\n      case \" \":\n        {\n          event.preventDefault();\n\n          if (SHOULD_READ === false) {\n            document.getElementById(\"start-reading\").click();\n          } else {\n            document.getElementById(\"stop-reading\").click();\n          }\n        }\n    }\n  });\n};\n\nexport default screenReader;\n\nconst mapPage = () => {\n  if (ALL_ELEMENTS.length === 0) {\n    ALL_ELEMENTS = document.body.getElementsByTagName(\"*\");\n  }\n\n  for (let i = 0; i < ALL_ELEMENTS.length; i++) {\n    const currentElement = ALL_ELEMENTS[i];\n\n    if (!currentElement.id) {\n      currentElement.id = i;\n    }\n\n    PAGE_MAP[currentElement.id] = i;\n  } // initialize CURRENT_ELEMENT to be the first thing in the page\n\n\n  CURRENT_ELEMENT.value = ALL_ELEMENTS[MIN_INDEX];\n};\n\nconst injectHtml = () => {\n  function populateVoiceList() {\n    VOICES = VOICE_SYNTH.getVoices();\n  }\n\n  populateVoiceList();\n  console.log(\"voices\");\n  console.log(VOICES);\n\n  if (typeof speechSynthesis !== 'undefined' && speechSynthesis.onvoiceschanged !== undefined) {\n    speechSynthesis.onvoiceschanged = populateVoiceList;\n  } //document.body.innerHTML += `<div id=\"sr\" style=\"position: sticky; top: 0px; right: 0px;\"> Screenreader </div>`\n\n\n  const sr = document.createElement(\"div\");\n  sr.style.float = 'right';\n  sr.id = 'sr';\n  sr.style.position = \"sticky\";\n  sr.style.top = '0';\n  sr.style.right = '0';\n  sr.style.zIndex = '999'; // Add buttons to start/stop reading\n\n  sr.innerHTML = `<button id=\"start-reading\" style=\"margin-bottom:4px; margin-top:4px\">Start Reading</button>`;\n  sr.innerHTML += `\\n<button id=\"stop-reading\">Stop Reading</button>`; // Add drop-down to select highlight color\n\n  sr.innerHTML += `<br>Highlight Color: <select name=\"highlight-color\" id=\"highlight-color\" style=\"margin-bottom:4px\">\n    \n        <option value=\"#fff280\">Yellow</option>\n        <option value=\"#ffd29e\">Orange</option>\n        <option value=\"#c8ff70\">Green</option>\n        <option value=\"#9efff9\">Cyan</option>\n        <option value=\"#e6c7ff\">Purple</option>\n        <option value=\"\">None</option>\n    </select>`;\n  sr.innerHTML += `<br> Voice: <select name=\"voice\" id=\"voice\"></select>`;\n\n  for (let i = 0; i < VOICES.length; i++) {\n    // console.log(voice)\n    // console.log(sr.getElementsByTagName('select'))\n    let voice = VOICES[i];\n    console.log(voice);\n\n    if (voice.default) {\n      console.log(\"default\");\n      console.log(voice);\n      VOICE = voice;\n    }\n\n    VOICE_MAP[i] = voice;\n    sr.getElementsByTagName('select')[1].innerHTML += `<option value=${i}>${voice.name + \", \" + voice.lang}</option>`;\n  }\n\n  console.log(\"vm3\");\n  console.log(VOICE_MAP[3]);\n  MIN_INDEX = MIN_INDEX + VOICES.length + 2;\n  CURRENT_INDEX = MIN_INDEX;\n  document.body.insertBefore(sr, document.body.firstChild);\n}; // maps element categories to reading handlers (return strings)\n// TODO: Read out title??\n// TODO dealing with color?\n\n\nlet HANDLERS;\nHANDLERS = {\n  \"text-only\": function textOnlyHandler(element) {\n    console.log(\"text-only\");\n    console.log(element);\n    console.log(element.innerHTML);\n    return element.innerHTML;\n  },\n  \"text-with-tag\": function textWithTagHandler(element) {\n    if (element === \"aside\") {\n      return \"Now reading an \" + element.tagName + \" . \" + element.innerHTML;\n    } else {\n      return \"Now reading a \" + element.tagName + \" . \" + element.innerHTML;\n    }\n  },\n  \"invisible\": function invisibleHandler(element) {\n    return \"\";\n  },\n  \"link\": function linkHandler(element) {\n    console.log(\"link handled\");\n    console.log(element.href);\n    document.getElementById(\"stop-reading\").click();\n\n    if (element.innerHTML !== element.href) {\n      //TODO just reading part of the link out\n      return \"Link: \" + element.innerHTML + \" This link goes to: \" + element.href + \" Press enter to click\" + \" the link, or press space to continue reading.\";\n    } else {\n      return \"Link to: \" + element.href + \" Press enter to click the link, or press space to continue reading.\";\n    }\n  },\n  \"button\": function buttonHandler(element) {\n    document.getElementById(\"stop-reading\").click();\n    return \"This is a button that says \" + element.innerHTML + \" Press enter to click the button,\" + \" or press space to continue reading.\";\n  },\n  \"nav\": function navHandler(element) {\n    return \"This is a navigation pane.\";\n  },\n  \"caption\": function captionHandler(element) {\n    return \"Caption: \" + element.innerHTML;\n  },\n  \"image\": function imageHandler(element) {\n    if (element.alt) {\n      return \"There is an image here displaying a \" + element.alt;\n    } else {\n      return \"There is an image here.\";\n    }\n  },\n  // TODO enumerate different types (e.g. color, datetime-local)/enrich?\n  \"input\": function inputHandler(element) {\n    document.getElementById(\"stop-reading\").click();\n    return \"There is an interactive \" + element.type + \" element here.\" + \" Press enter to type in \" + \" the text box, or press space to continue reading.\";\n  },\n  \"canvas\": function canvasHandler(element) {\n    if (!(element.innerHTML.trim === \"\")) {\n      return \"There is a graphic here displaying: \" + element.innerHTML;\n    } else {\n      return \"There is a graphic here.\";\n    }\n  },\n  // sometimes <p> then <ul> => doesn't make sense\n  \"unordered-list\": function unorderedListHandler(element) {\n    return \"This is a list.\";\n  },\n  \"ordered-list\": function orderedListHandler(element) {\n    return \"This is an ordered list.\";\n  },\n  // TODO handle properly -- connect to associated element\n  \"label\": function labelHandler(element) {\n    return \"There is a label here. It says \" + element.innerHTML;\n  },\n  \"table\": function tableHandler(element) {\n    return \"There is a table here.\" + element.innerHTML;\n  },\n  \"th\": function tableHeaderHandler(element) {\n    if (element.scope) {\n      if (element.scope === \"col\") {\n        return \"This is a column header. It says \" + element.innerHTML;\n      } else {\n        return \"This is a \" + element.scope + \" header. It says \" + element.innerHTML;\n      }\n    } else {\n      return \"This is a header. It says \" + element.innerHTML;\n    }\n  },\n  \"td\": function tableDataHandler(element) {\n    return \"The data in this cell says \" + element.innerHTML;\n  },\n  \"tfoot\": function tableFooterHandler(element) {\n    return \"This is a table footer. It contains \" + element.innerHTML; // fix me\n  },\n  \"audio\": function audioHandler(element) {\n    return \"There is an audio file.\"; // + element.src;\n  },\n  \"fieldset\": function fieldSetHandler(element) {\n    return \"There is a grouping of elements here.\"; // TODO handle legend, etc.?\n  },\n  \"form\": function formHandler(element) {\n    return \"There is a field to submit information.\"; // TODO clean up\n  },\n  \"select\": function selectHandler(element) {\n    return \"There is a dropdown menu.\";\n  },\n  \"progress\": function progressBarHandler(element) {\n    if (element.max && element.value) {\n      return \"There is a graphic here displaying progress of \" + element.value + \" out of \" + element.max;\n    } else if (element.value) {\n      return \"There is a graphic here displaying progress of \" + element.value + \" out of 1.\";\n    } else {\n      return \"There is a progress bar here.\"; // TODO clean up\n    }\n  },\n  \"text-area\": function textAreaHandler(element) {\n    return \"There is a field here to enter text.\"; // TODO make interactive\n  }\n}; // maps element tag names to element categories\n\nconst ROLES = {\n  \"div\": \"text-only\",\n  \"p\": \"text-only\",\n  \"li\": \"text-only\",\n  \"option\": \"text-only\",\n  \"h1\": \"text-only\",\n  \"h2\": \"text-only\",\n  \"h3\": \"text-only\",\n  \"h4\": \"text-only\",\n  \"h5\": \"text-only\",\n  \"h6\": \"text-only\",\n  \"aside\": \"text-with-tag\",\n  \"header\": \"text-with-tag\",\n  \"footer\": \"text-with-tag\",\n  \"blockquote\": \"text-with-tag\",\n  \"script\": \"invisible\",\n  \"article\": \"invisible\",\n  \"main\": \"invisible\",\n  \"section\": \"invisible\",\n  \"cite\": \"invisible\",\n  \"figure\": \"invisible\",\n  \"time\": \"invisible\",\n  \"figcaption\": \"caption\",\n  \"caption\": \"caption\",\n  \"canvas\": \"canvas\",\n  \"svg\": \"canvas\",\n  \"ul\": \"unordered-list\",\n  \"ol\": \"ordered-list\",\n  // want to add more information here?\n  \"img\": \"image\",\n  \"a\": \"link\",\n  \"nav\": \"nav\",\n  \"button\": \"button\",\n  \"input\": \"input\",\n  \"label\": \"label\",\n  \"audio\": \"audio\",\n  \"table\": \"table\",\n  \"th\": \"th\",\n  \"td\": \"td\",\n  \"tfoot\": \"tfoot\",\n  \"tr\": \"invisible\",\n  // handle me?\n  \"fieldset\": \"fieldset\",\n  \"form\": \"form\",\n  \"select\": \"select\",\n  \"progress\": \"progress\",\n  \"textarea\": \"text-area\" //TODO the rest of the elements, and make sure this works\n\n};","map":{"version":3,"sources":["/Users/annaswanson/Desktop/cs0320/projects/project-2-7m5krp8qujxzdjfs-bqbnakasprv7aqe6e-uswlm4qxurayaa2h/src/brown-cs-maps-app/src/screenReader.js"],"names":["ALL_ELEMENTS","PAGE_MAP","VOICE_SYNTH","window","speechSynthesis","VOICES","VOICE","VOICE_MAP","MIN_INDEX","CURRENT_INDEX","SHOULD_READ","HIGHLIGHT_COLOR","highlightElement","e","style","unhighlightElement","CURRENT_ELEMENT","setAndSpeak","newElement","value","hidden","visibility","handler","HANDLERS","ROLES","tagName","toLowerCase","speakString","utterance","SpeechSynthesisUtterance","console","log","voice","speak","Promise","resolve","onend","screenReader","injectHtml","mapPage","checkReading","voiceSelect","document","getElementById","onchange","select","addEventListener","length","READING_LOOP","cancel","event","key","preventDefault","id","focus","click","body","getElementsByTagName","i","currentElement","populateVoiceList","getVoices","onvoiceschanged","undefined","sr","createElement","float","position","top","right","zIndex","innerHTML","default","name","lang","insertBefore","firstChild","textOnlyHandler","element","textWithTagHandler","invisibleHandler","linkHandler","href","buttonHandler","navHandler","captionHandler","imageHandler","alt","inputHandler","type","canvasHandler","trim","unorderedListHandler","orderedListHandler","labelHandler","tableHandler","tableHeaderHandler","scope","tableDataHandler","tableFooterHandler","audioHandler","fieldSetHandler","formHandler","selectHandler","progressBarHandler","max","textAreaHandler"],"mappings":"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","sourcesContent":["// an array containing all of the elements in the page\nlet ALL_ELEMENTS = []\n\n// map element ids to location in ALL_ELEMENTS\nlet PAGE_MAP = {}\n\n// shortcut to access speech synthesizer\nlet VOICE_SYNTH = window.speechSynthesis\n\n// array containing all voices\nlet VOICES = []\n\n// global for voice\nlet VOICE\n\n// map\nlet VOICE_MAP = {}\n\n// global for index of first element on page (following controls)\n// NOTE: will need to update based on elements (controls) we insert into the page\nlet MIN_INDEX = 11\n\n// global for current index\nlet CURRENT_INDEX = MIN_INDEX\n\nlet SHOULD_READ = false\n\n// global for highlight color\n// default yellow\nlet HIGHLIGHT_COLOR = \"#fff280\"\n\nfunction highlightElement(e) {\n    e.style['background-color'] = HIGHLIGHT_COLOR\n    e.style['text-decoration'] = \"underline\"\n    e.style['color'] = \"black\"\n}\n\nfunction unhighlightElement(e) {\n    e.style['background-color'] = \"\"\n    e.style['text-decoration'] = \"\"\n    e.style['color'] = \"\"\n}\n\nlet CURRENT_ELEMENT = {\n    setAndSpeak: async function (newElement) {\n        this.value = newElement\n        if (newElement.style.hidden !== true && newElement.style.visibility !== \"none\") {\n            this.value = newElement\n            unhighlightElement(newElement)\n            let handler = HANDLERS[ROLES[newElement.tagName.toLowerCase()]]\n            let speakString = handler(newElement)\n            if (speakString !== \"\") {\n                highlightElement(newElement)\n                let utterance = new SpeechSynthesisUtterance(speakString)\n                console.log(\"utterance.voice #1\")\n                console.log(utterance.voice)\n                console.log(\"VOICE\")\n                console.log(VOICE)\n                utterance.voice = VOICE\n                console.log(\"utterance.voice #2\")\n                console.log(utterance.voice)\n                VOICE_SYNTH.speak(utterance)\n                return new Promise(resolve => {\n                    utterance.onend = resolve\n                })\n            }\n        }\n    },\n    value: null\n}\n\nconst screenReader = () => {\n    // inject html elements before mapping out the page\n    injectHtml()\n\n    // map out the page to fill out PAGE_MAP array\n    mapPage()\n\n    let checkReading = async function () {\n        return SHOULD_READ\n    }\n\n    // Set the voice preferences for the page\n    let voiceSelect = document.getElementById(\"voice\");\n    voiceSelect.onchange = () => { VOICE = VOICE_MAP[voiceSelect.value] }\n\n    // Set the highlight color for the page\n    let select = document.getElementById(\"highlight-color\");\n    select.onchange = () => { HIGHLIGHT_COLOR = select.value }\n\n    document.getElementById(\"start-reading\").addEventListener(\"click\", () => {\n        console.log(\"start\")\n        // if (!SHOULD_READ) -- idea to handle multiple \"read page\" clicks (potentially return to later) -- messes up checkReading\n        SHOULD_READ = true\n        // restart reading page if at the end\n        if (CURRENT_INDEX === ALL_ELEMENTS.length - 1) {\n            CURRENT_INDEX = MIN_INDEX\n        }\n        let READING_LOOP = async function () {\n            console.log(ALL_ELEMENTS.length)\n            for (CURRENT_INDEX; CURRENT_INDEX < ALL_ELEMENTS.length; CURRENT_INDEX++) {\n                if (await checkReading()) {\n                    console.log(CURRENT_INDEX)\n                    // in case we had just been stopped, unhighlight the previous thing\n                    unhighlightElement(CURRENT_ELEMENT.value)\n                    let newElement = ALL_ELEMENTS[CURRENT_INDEX]\n                    await CURRENT_ELEMENT.setAndSpeak(newElement)\n                } else {\n                    highlightElement(CURRENT_ELEMENT.value)\n                    console.log(\"Reading stopped\")\n                    break\n                }\n            }\n        }\n        READING_LOOP()\n    })\n\n    // event listener for clicking the stop reading button\n    document.getElementById(\"stop-reading\").addEventListener(\"click\", () => {\n        console.log(\"stop\")\n        VOICE_SYNTH.cancel();\n        SHOULD_READ = false\n    })\n\n    // event listeners for arrow key presses and interacting using space\n    window.addEventListener(\"keydown\", async (event) => {\n        let newElement;\n        // potentially leave highlighting until restarting\n        switch (event.key) {\n            case \"ArrowLeft\" :\n                // cancel the voice and prevent default\n                event.preventDefault()\n                VOICE_SYNTH.cancel();\n                console.log(\"Going back\")\n                SHOULD_READ = false\n\n                // in case we had just been stopped\n                unhighlightElement(CURRENT_ELEMENT.value)\n\n                // get the element before the one that's currently being read out\n                CURRENT_INDEX = PAGE_MAP[CURRENT_ELEMENT.value.id] - 1\n                console.log(CURRENT_INDEX)\n\n                // make sure that the user can't get to our buttons\n                if (CURRENT_INDEX < MIN_INDEX) {\n                    CURRENT_INDEX = MIN_INDEX;\n                }\n\n                // speak and then unhighlight this element\n                newElement = ALL_ELEMENTS[CURRENT_INDEX]\n\n                // skip over invisible elements\n                while (ROLES[newElement.tagName.toLowerCase()] === \"invisible\") {\n                    CURRENT_INDEX -= 1\n\n                    if (CURRENT_INDEX < MIN_INDEX) {\n                        CURRENT_INDEX = MIN_INDEX\n                        newElement = ALL_ELEMENTS[CURRENT_INDEX]\n                        break;\n                    }\n                    newElement = ALL_ELEMENTS[CURRENT_INDEX]\n                }\n\n                await CURRENT_ELEMENT.setAndSpeak(newElement)\n                // unhighlightElement(newElement)\n                break;\n            case \"ArrowRight\" :\n                // cancel the voice and prevent default\n                event.preventDefault()\n                VOICE_SYNTH.cancel()\n                console.log(\"Going forward\")\n                SHOULD_READ = false\n\n                // in case we had just been stopped\n                unhighlightElement(CURRENT_ELEMENT.value)\n\n                // get the element before the one that's currently being read out\n                CURRENT_INDEX = PAGE_MAP[CURRENT_ELEMENT.value.id] + 1\n                console.log(CURRENT_INDEX)\n\n                // make sure user can't go past length of ALL_ELEMENTS\n                if (CURRENT_INDEX >= ALL_ELEMENTS.length) {\n                    CURRENT_INDEX = ALL_ELEMENTS.length - 1\n                }\n\n                // speak and then unhighlight this element\n                newElement = ALL_ELEMENTS[CURRENT_INDEX]\n\n                while (ROLES[newElement.tagName.toLowerCase()] === \"invisible\") {\n                    CURRENT_INDEX += 1\n\n                    if (CURRENT_INDEX >= ALL_ELEMENTS.length) {\n                        CURRENT_INDEX = ALL_ELEMENTS.length - 1\n                        newElement = ALL_ELEMENTS[CURRENT_INDEX]\n                        break;\n                    }\n                }\n\n                await CURRENT_ELEMENT.setAndSpeak(newElement)\n                // unhighlightElement(newElement)\n                break;\n            case \"Enter\" : {\n                event.preventDefault()\n                let e = CURRENT_ELEMENT.value\n                if (e.tagName.toLowerCase() === \"input\") {\n                    e.focus()\n                } else {\n                    // else, it will be a button or a link\n                    e.click()\n                }\n                break;\n            }\n            case \" \" : {\n                event.preventDefault()\n                if (SHOULD_READ === false) {\n                    document.getElementById(\"start-reading\").click()\n                } else {\n                    document.getElementById(\"stop-reading\").click()\n                }\n            }\n        }\n    })\n}\n\nexport default screenReader\n\nconst mapPage = () => {\n    if (ALL_ELEMENTS.length === 0) {\n        ALL_ELEMENTS = document.body.getElementsByTagName(\"*\")\n    }\n\n    for (let i = 0; i < ALL_ELEMENTS.length; i++) {\n        const currentElement = ALL_ELEMENTS[i]\n        if (!currentElement.id) {\n            currentElement.id = i\n        }\n        PAGE_MAP[currentElement.id] = i\n    }\n\n    // initialize CURRENT_ELEMENT to be the first thing in the page\n    CURRENT_ELEMENT.value = ALL_ELEMENTS[MIN_INDEX]\n\n}\n\nconst injectHtml = () => {\n    function populateVoiceList() {\n        VOICES = VOICE_SYNTH.getVoices();\n    }\n    populateVoiceList();\n\n    console.log(\"voices\")\n    console.log(VOICES)\n\n    if (typeof speechSynthesis !== 'undefined' && speechSynthesis.onvoiceschanged !== undefined) {\n        speechSynthesis.onvoiceschanged = populateVoiceList;\n    }\n    //document.body.innerHTML += `<div id=\"sr\" style=\"position: sticky; top: 0px; right: 0px;\"> Screenreader </div>`\n    const sr = document.createElement(\"div\")\n    sr.style.float = 'right'\n    sr.id = 'sr'\n    sr.style.position = \"sticky\"\n    sr.style.top = '0'\n    sr.style.right = '0'\n    sr.style.zIndex = '999'\n    // Add buttons to start/stop reading\n    sr.innerHTML = `<button id=\"start-reading\" style=\"margin-bottom:4px; margin-top:4px\">Start Reading</button>`\n    sr.innerHTML += `\\n<button id=\"stop-reading\">Stop Reading</button>`\n    // Add drop-down to select highlight color\n    sr.innerHTML += `<br>Highlight Color: <select name=\"highlight-color\" id=\"highlight-color\" style=\"margin-bottom:4px\">\n    \n        <option value=\"#fff280\">Yellow</option>\n        <option value=\"#ffd29e\">Orange</option>\n        <option value=\"#c8ff70\">Green</option>\n        <option value=\"#9efff9\">Cyan</option>\n        <option value=\"#e6c7ff\">Purple</option>\n        <option value=\"\">None</option>\n    </select>`\n    sr.innerHTML += `<br> Voice: <select name=\"voice\" id=\"voice\"></select>`\n    for (let i = 0; i < VOICES.length; i++) {\n        // console.log(voice)\n        // console.log(sr.getElementsByTagName('select'))\n        let voice = VOICES[i]\n        console.log(voice)\n\n        if (voice.default) {\n            console.log(\"default\")\n            console.log(voice)\n            VOICE = voice\n        }\n\n        VOICE_MAP[i] = voice\n\n        sr.getElementsByTagName('select')[1].innerHTML +=\n            `<option value=${i}>${voice.name + \", \" + voice.lang}</option>`\n    }\n\n    console.log(\"vm3\")\n    console.log(VOICE_MAP[3])\n\n    MIN_INDEX = MIN_INDEX + VOICES.length + 2\n    CURRENT_INDEX = MIN_INDEX\n    \n    document.body.insertBefore(sr, document.body.firstChild)\n}\n\n// maps element categories to reading handlers (return strings)\n// TODO: Read out title??\n// TODO dealing with color?\nlet HANDLERS;\nHANDLERS = {\n    \"text-only\": function textOnlyHandler(element) {\n        console.log(\"text-only\")\n        console.log(element)\n        console.log(element.innerHTML)\n        return element.innerHTML;\n    },\n    \"text-with-tag\": function textWithTagHandler(element) {\n        if (element === \"aside\") {\n            return \"Now reading an \" + element.tagName + \" . \" + element.innerHTML;\n        } else {\n            return \"Now reading a \" + element.tagName + \" . \" + element.innerHTML;\n        }\n    },\n    \"invisible\": function invisibleHandler(element) {\n        return \"\";\n    },\n    \"link\": function linkHandler(element) {\n        console.log(\"link handled\")\n        console.log(element.href)\n        document.getElementById(\"stop-reading\").click()\n        if (element.innerHTML !== element.href) {\n            //TODO just reading part of the link out\n            return \"Link: \" + element.innerHTML + \" This link goes to: \" + element.href + \" Press enter to click\" +\n                \" the link, or press space to continue reading.\";\n        } else {\n            return \"Link to: \" + element.href + \" Press enter to click the link, or press space to continue reading.\";\n        }\n\n    },\n    \"button\": function buttonHandler(element) {\n        document.getElementById(\"stop-reading\").click()\n        return \"This is a button that says \" + element.innerHTML + \" Press enter to click the button,\" +\n            \" or press space to continue reading.\";\n    },\n    \"nav\": function navHandler(element) {\n        return \"This is a navigation pane.\";\n    },\n    \"caption\": function captionHandler(element) {\n        return \"Caption: \" + element.innerHTML;\n    },\n    \"image\": function imageHandler(element) {\n        if (element.alt) {\n            return \"There is an image here displaying a \" + element.alt;\n        } else {\n            return \"There is an image here.\";\n        }\n    },\n    // TODO enumerate different types (e.g. color, datetime-local)/enrich?\n    \"input\": function inputHandler(element) {\n        document.getElementById(\"stop-reading\").click()\n        return \"There is an interactive \" + element.type + \" element here.\" + \" Press enter to type in \" +\n            \" the text box, or press space to continue reading.\";\n    },\n    \"canvas\": function canvasHandler(element) {\n        if (!(element.innerHTML.trim === \"\")) {\n            return \"There is a graphic here displaying: \" + element.innerHTML;\n        } else {\n            return \"There is a graphic here.\"\n        }\n    },\n    // sometimes <p> then <ul> => doesn't make sense\n    \"unordered-list\": function unorderedListHandler(element) {\n        return \"This is a list.\";\n    },\n    \"ordered-list\": function orderedListHandler(element) {\n        return \"This is an ordered list.\";\n    },\n    // TODO handle properly -- connect to associated element\n    \"label\": function labelHandler(element) {\n        return \"There is a label here. It says \" + element.innerHTML;\n    },\n    \"table\": function tableHandler(element) {\n        return \"There is a table here.\" + element.innerHTML;\n    },\n    \"th\": function tableHeaderHandler(element) {\n        if (element.scope) {\n            if (element.scope === \"col\") {\n                return \"This is a column header. It says \" + element.innerHTML;\n            } else {\n                return \"This is a \" + element.scope + \" header. It says \" + element.innerHTML;\n            }\n        } else {\n            return \"This is a header. It says \" + element.innerHTML;\n        }\n    },\n    \"td\": function tableDataHandler(element) {\n        return \"The data in this cell says \" + element.innerHTML;\n    },\n    \"tfoot\": function tableFooterHandler(element) {\n        return \"This is a table footer. It contains \" + element.innerHTML; // fix me\n    },\n    \"audio\": function audioHandler(element) {\n        return \"There is an audio file.\" // + element.src;\n    },\n    \"fieldset\": function fieldSetHandler(element) {\n        return \"There is a grouping of elements here.\" // TODO handle legend, etc.?\n    },\n    \"form\": function formHandler(element) {\n        return \"There is a field to submit information.\" // TODO clean up\n    },\n    \"select\": function selectHandler(element) {\n        return \"There is a dropdown menu.\";\n    },\n    \"progress\": function progressBarHandler(element) {\n        if (element.max && element.value) {\n            return \"There is a graphic here displaying progress of \"\n                + element.value + \" out of \" + element.max;\n        } else if (element.value) {\n            return \"There is a graphic here displaying progress of \"\n                + element.value + \" out of 1.\";\n        } else {\n            return \"There is a progress bar here.\"; // TODO clean up\n        }\n    },\n    \"text-area\": function textAreaHandler(element) {\n        return \"There is a field here to enter text.\"; // TODO make interactive\n    }\n\n\n};\n// maps element tag names to element categories\nconst ROLES = {\n    \"div\": \"text-only\",\n    \"p\": \"text-only\",\n    \"li\": \"text-only\",\n    \"option\": \"text-only\",\n    \"h1\": \"text-only\",\n    \"h2\": \"text-only\",\n    \"h3\": \"text-only\",\n    \"h4\": \"text-only\",\n    \"h5\": \"text-only\",\n    \"h6\": \"text-only\",\n\n    \"aside\": \"text-with-tag\",\n    \"header\": \"text-with-tag\",\n    \"footer\": \"text-with-tag\",\n    \"blockquote\": \"text-with-tag\",\n\n    \"script\": \"invisible\",\n    \"article\": \"invisible\",\n    \"main\": \"invisible\",\n    \"section\": \"invisible\",\n    \"cite\": \"invisible\",\n    \"figure\": \"invisible\",\n    \"time\": \"invisible\",\n\n    \"figcaption\": \"caption\",\n    \"caption\": \"caption\",\n\n    \"canvas\": \"canvas\",\n    \"svg\": \"canvas\",\n\n    \"ul\": \"unordered-list\",\n    \"ol\": \"ordered-list\", // want to add more information here?\n\n    \"img\": \"image\",\n    \"a\": \"link\",\n    \"nav\": \"nav\",\n    \"button\": \"button\",\n    \"input\": \"input\",\n    \"label\": \"label\",\n    \"audio\": \"audio\",\n\n    \"table\": \"table\",\n    \"th\": \"th\",\n    \"td\": \"td\",\n    \"tfoot\": \"tfoot\",\n    \"tr\": \"invisible\", // handle me?\n\n    \"fieldset\": \"fieldset\",\n    \"form\": \"form\",\n    \"select\": \"select\",\n    \"progress\": \"progress\",\n    \"textarea\": \"text-area\"\n\n    //TODO the rest of the elements, and make sure this works\n}"]},"metadata":{},"sourceType":"module"}